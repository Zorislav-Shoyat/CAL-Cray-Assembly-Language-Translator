********************************************************
*
* Zorislav Shoyat, 11/3/2014, 2:11
*
* CRAY-1 / CRAY-X/MP MONITOR PROGRAMME
*
* INITIAL DESIGN BY CHRISTOPHER FENTON
*
********************************************************
*
* v0.01 11/3/2013, 2:14, Atelier, Shanti (Tintilin)
* v0.02 19/3/2013, 16:04 Atelier, Shanti (gu.irb)
*                  23:11 Atelier, Gu (gu.irb)
* v0.03 29/3/2013, 5:00, Atelier, Shanti (Gu)
*
********************************************************
*
* v0.02 STILL NO RESPONSE TO THE CHARACTER OUTPUT.
*       PUTTING LEDS ON KNOW PLACE, AND COUNTING
* V0.03 NEW Vitlersoft CAL TRANSLATOR;
*       CRAY-ON-CHIP NOW PROPERLY ADDRESSES PARCELS
*       HOPEFULLY IT WILL FINALLY WORK
*
********************************************************
*
* This is the first thing the CRAY processor executes
* when out of reset.
*
* The EXCHANGE PACKET is prepared by ENTRY
*
********************************************************


**************************
* Internal LED address
**************************
*LED$OUT  =         O'4000020
* 

LED$OUT  =         H'100008

**************************
* Internal UART addresses
**************************
*
* This is an addition to the original CRAY computers to allow direct
* control of the processor - loading and monitoring programmes
* 
*TX$BUSY  =         O'4000000      * 
*RX$READY =         O'4000002      * 
*RX$DATA  =         O'4000004      * 
*TX$DATA  =         O'4000006      * 
*CVL      =         O'4000010      * CHARACTER VECTOR LENGTH (EXPECTED OR TRANSMITTED)
* 
TX$BUSY  =         H'100000
RX$READY =         H'100001
RX$DATA  =         H'100002
TX$DATA  =         H'100003
CVL      =         H'100004

         ORG       O'0
         ENTRY     WAKEUP

*****
HELLO    CON       A'Hello, this is CRAY on a chip! Happy to be here with You!'
         CON       H'0D0A000000000000
         CON       0               * END OF GREETING

**************************
* Start of the programme
* Getting out of reset
**************************

WAKEUP   A6        D'65537
         A5        LED$OUT
WAKELOP  S1        A6
*         S1        S1>D'16
         0,A5      S1
         A6        A6+1
* 
* 
***********************************

STARTUP  A1        HELLO
         A2        0
         R         PRINTOUT
         J         WAKELOP       * REPEAT THE GREETING CONSTANTLY

************************************************
* SUBROUTINE PRINTOUT
************************************************
************************************************
* PRINT TO UART
************************************************
* NAME:
*   PRINTOUT
* ENTRY:
*   ENTER WITH 'R'
*   A1 <TEXT ADDRESS>
*   A2 <LENGTH IN WORDS>
* EXIT:
*   A1 -> NEXT WORD AFTER
* DESTROYS:
*   A0, A1, A2, A3, S0
* CONTROL:
*   IF A2 = 0 PRINT UNTIL WORD 0
* WARNING:
*   PRINTOUT ALWAYS PRINTS FULL WORDS, BUT THE
*   UART MAY PRINT ONLY SO MANY CHARACTERS AS
*   INDICATED BY A2
*
************************************************

PRINTOUT A3        D'8                                 * A3 IS 8
         A0        A2             * PRINT UNTIL WORD 0?
         JAZ       PRUNTIL

PRINTOT1 CVL,0     A3
         A0        A2-A3
         JAP       PRINTMNY
         CVL,0     A2
PRINTMNY A2        A2-A3

* COUNT FOR SOME TIME, THEN SKIP THE TEST
         A2        WAIT
CHK$TX1  A0        TX$BUSY,0      *make sure the transmitter is free
         JAZ       CHK$TX3
         A2        A2-1
         A0        A2
         JAP       CHK$TX1
			J         WAKEUP

CHK$TX3  S0        ,A1            *read from the text address
         TX$DATA,0 S0             *write that word to serport

         A1        A1+1           *dump$ptr++

         A0        A2             *A0=dump$cnt
         JAP       PRINTOT1       *if dump$cnt<0, send nxt word

* END OF PRINTOUT, RETURN FROM SUBROUTINE
PRINTEND J         B00

* PRINT UNTIL WORD 0 FOUND
PRUNTIL  CVL,0     A3
PRUNTLOP S0        ,A1            * GET FROM MEMORY
         JSZ       PRINTEND
         A2        WAIT           * COUNT FOR SOME TIME, THEN SKIP THE TEST
CHK$TX2  A0        TX$BUSY,0      *make sure the transmitter is free
         JAZ       CHK$TX4
         A2        A2-1
         A0        A2
         JAP       CHK$TX2
			J         WAKEUP

CHK$TX4  S1        ,A1            *read from the text address
         TX$DATA,0 S1             *write that word to serport
         A1        A1+1                 *dump$ptr++
         J         PRUNTLOP             *if dump$cnt<0, send nxt word

WAIT     =         10

************************************************
* END OF SUBROUTINE "PRINTOUT"
************************************************

         END



*********************
* division
*********************
* From: PrelimCALman
*
*********************

*      Divide: S1 S2/FS1
*      Uses S3

DIVIDEF  S3        /HS2
         S1        S1*FS3
         S2        S2*IS3
         S1        S1*FS2
         J         B0



