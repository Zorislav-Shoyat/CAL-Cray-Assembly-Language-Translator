         OPTIONS LIST
*         OPTIONS SHOWSF
*         OPTIONS SHOWSTAT
****************************************
*23456789012345678901234567890123456789
*        111111111122222222222333333333
*xxx     yyy       zzz            comm
****************************************
*
* ZORISLAV SHOYAT, 16/3/2014, 19:15
*
* FIRST VIRTUE KERNELS FOR CRAY-1
* 1. COMPLEX AND QUATERNION
*    MULTIPLICATION
*
****************************************
         START     COMPUTE
COMPUTE  =         *
         S2        RT
MULTIPLY =         *

* REAL * QUATERNION
         A1        LEFT
         A2        RIGHT
         A3        RESULT
         A4        ENDLEFT
         A4        A4-A1          * CALCULATE THE VECTOR LENGTH
         S1        A4
         S1        S1>2           * DIVIDE BY 4
         A4        S1  
         R         MULRQ

* QUATERNION * QUATERNION
         A1        LEFT
         A2        RIGHT
         A3        RESULT
         A4        ENDLEFT
         A4        A4-A1          * CALCULATE THE VECTOR LENGTH
         S1        A4
         S1        S1>2           * DIVIDE BY 4
         A4        S1  
         R         MULQQ

* REAL * COMPLEX
         A1        LEFT
         A2        RIGHT
         A3        RESULT
         A4        256
         R         MULRC        

* COMPLEX * COMPLEX
         A1        LEFT
         A2        RIGHT
         A3        RESULT
         A4        256
         R         MULCC

*
         J         EOPROG
*
*

******************************************
*
* ZORISLAV SHOYAT, 16/3/2014, 23:22
* ATELIER, SHANTI
*
******************************************
*
* MULTIPLICATIONS
*
******************************************

*******************************************
** COMPLEX NUMBERS                       **
*******************************************

*******************************************
*
* MULTIPLY LEFT REAL WITH RIGHT COMPLEX
*
* NAME: MULRC
*
* DESCRIPTION:
*        MULTIPLY REAL WITH COMPLEX
*
* ENTRY: A1 = LEFT REAL ARGUMENT ADDRESS
*        A2 = RIGHT COMPLEX ARGUMENT ADDRESS
*        A3 = COMPLEX RESULT SPACE ADDRESS
*        A4 = VECTOR LENGTH
*
* EXIT: RESULT IN MEMORY AT A3
*
* USES: S0, S1, S2
*       A0, A1, A2, A3, A4, A5, A6, A7
*       V0, V1, V2, V3, V4, V5
*
* RESTRICTION:
*
*
******************************************
*
* A5 = 2 FOR COMPLEX NUMBERS
*
MULRC     =         *
* SET A5 TO 2 FOR VECTOR STRIDE ON COMPLEX NUMBERS
         A5        2
* PROCESS VECTORS LONGER THAN 64 ELEMENTS
         A7        A4            * PRESERVE LENGTH
         S2        <6
         S1        A4
         S1        S1&S2
         A4        S1
         S0        S1
         JSN       MULRCLOP
         A4        64
*
* PROCESS:
*    V0 = LEFT REAL (STRIDE 1)
*    V2 = RIGHT REAL, V3 = RIGHT IMAGINARY
*    V4 = RESULT REAL, V5 = RESULT IMAGINARY
*
* LOAD AND MULTIPLY
MULRCLOP VL        A4
         A0        A1
         V0        ,A0,1            *AR
         A0        A2
         V2        ,A0,A5           *BR
         V4        V2*FV0           *RR = AR * BR
         A0        A2+1
         V3        ,A0,A5           *BI
         A0        A3
         ,A0,A5    V4               *RR OUT
         V5        V2*FV0           *RI = AR * BI
         A0        A3+1
         ,A0,A5    V5               *RI OUT
*
* CHECK FOR MORE ELEMENTS
         A1        A1+A4            * A STRIDE 1
         A6        A4*A5            * STRIDE A5 = COMPLEX
         A2        A2+A6
         A3        A3+A6
         A7        A7-A4
         A0        A7               * END CHECKED WITH A7, VECTOR LENGTH COUNTER
         A4        64         
         JAN       MULRCLOP
*
         J         B00

*****************************************************



******************************************
*
* MULTIPLY TWO COMPLEX NUMBERS
*
* NAME: MULCC
*
* DESCRIPTION:
*        MULTIPLY TWO COMPLEX NUMBERS
*
* ENTRY: A1 = LEFT ARGUMENT ADDRESS
*        A2 = RIGHT ARGUMENT ADDRESS
*        A3 = RESULT SPACE ADDRESS
*        A4 = VECTOR LENGTH
*
* EXIT: RESULT IN MEMORY AT A3
*
* USES: S0
*       A0, A1, A2, A3, A4, A5
*       V0, V1, V2, V3, V4, V5, V6
*
* RESTRICTION:
*
*
******************************************
*
* A5 = 2 FOR COMPLEX NUMBERS
*
MULCC     =         *
* SET A5 TO 2 FOR VECTOR STRIDE ON COMPLEX NUMBERS
         A5        2
* PROCESS VECTORS LONGER THAN 64 ELEMENTS
         A7        A4            * PRESERVE LENGTH
         S2        <6
         S1        A4
         S1        S1&S2
         A4        S1
         S0        S1
         JSN       MULCCLOP
         A4        64
*
* PROCESS:
*    V0 = LEFT REAL, V1 = LEFT IMAGINARY
*    V2 = RIGHT REAL, V3 = RIGHT IMAGINARY
*    V4 = RESULT REAL, V5 = RESULT IMAGINARY
*
* LOAD AND MULTIPLY
MULCCLOP VL        A4
         A0        A1
         V0        ,A0,A5           *AR
         A0        A2
         V2        ,A0,A5           *BR
         V4        V0*FV2           *RR = AR * BR
         A0        A1+1
         V1        ,A0,A5           *AI
         V0        V1*FV2           *X0 = AI * BR
         A0        A2+1
         V3        ,A0,A5           *BI
         V5        V1*FV3           *XI = AI * BI
         V4        V4-FV5           *RR = (AR * BR) - (AI * BI)
         V6        V0*FV3           *X6 = AR * BI
         A0        A3
         ,A0,A5    V4
         V5        V5+FV6           *RI = (AR * BI) + (AI * BR)
         A0        A3+1
         ,A0,A5    V5
*
* CHECK FOR MORE ELEMENTS
         A6        A4*A5            * STRIDE A5 = COMPLEX
         A1        A1+A6
         A2        A2+A6
         A3        A3+A6
         A4        64         
         A7        A7-A4
         A0        A7               * END CHECKED WITH A7, VECTOR LENGTH COUNTER
         JAN       MULCCLOP
*
         J         B00

*********************************
* END OF COMPLEX MULTIPLICATION
*********************************
* 16/3/2014, 23:05
*********************************

******************************************
*
* MULTIPLY LEFT REAL WITH RIGHT QUATERNION
*
* NAME: MULRQ
*
* DESCRIPTION:
*        MULTIPLY REAL AND QUATERNION
*
* ENTRY: A1 = LEFT ARGUMENT ADDRESS
*        A2 = RIGHT ARGUMENT ADDRESS
*        A3 = RESULT SPACE ADDRESS
*        A4 = VECTOR LENGTH
*
* EXIT: RESULT IN MEMORY AT A3
*
* USES: S0, S1, S2
*       A0, A1, A2, A3, A4, A5, A6, A7
*       V0, V1, V2, V3, V4, V5, V6, V7
*       B07
*
* RESTRICTION:
*
******************************************
*
* A5 = 4 FOR QUATERNION NUMBERS
*
MULRQ     =         *
* SET A5 TO 4 FOR VECTOR STRIDE ON QUATERNION NUMBERS
         A5        4
* PROCESS VECTORS LONGER THAN 64 ELEMENTS
         B07       A4               * PRESERVE LENGTH, SAVE FOR LATER, WE NEED A7 AS K OFFSET
         S2        <6
         S1        A4
         S1        S1&S2
         A4        S1
* PREPARE FOR ADDRESS ADDITION TO A0
         A6        2                * CONSTANT 2, J OFFSET
         A7        3                * CONSTANT 3, K OFFSET
         S0        S1
         JSN       MULRQLOP
         A4        64
*
* PROCESS:
*    RR = AR*BR
*    RI = AR*BI
*    RJ = AR*BJ
*    RK = AR*BK
*
* LOAD AND MULTIPLY
MULRQLOP VL        A4
         A0        A1
         V0        ,A0,1            *AR.0 REAL NUMBER
         A0        A2
         V1        ,A0,A5           *BR.1
         V2        V0*FV1           * RR.2 = LR.0 * RR.1
         A0        A3
         ,A0,A5    V2               *  RESULT RR.2
         A0        A2+1
         V3        ,A0,A5           *BI.3
         A0        A2+A6
         V5        ,A0,A5           *BJ.5
         V4        V0*FV3           * RI.4 = AR.0 * BI.3
         A0        A2+A7
         V6        ,A0,A5           *BK.6
         A0        A3+1
         ,A0,A5    V4               *  RESULT RI.4
         V2        V0*FV5           * RJ.2 = AR.0 * BJ.1
         A0        A3+A6
         ,A0,A5    V2               *  RESULT RJ.2
         V4        V0*FV6           * RK.4 = AR.0 * BK.3
         A0        A3+A7
         ,A0,A5    V4               *   RESULT RK.4

* CHECK FOR MORE ELEMENTS
         A6        A4*A5            * STRIDE A5 = QUATERNION
         A1        A1+A6
         A2        A2+A6
         A3        A3+A6
         A7        B07              * WE NEED ONE MORE A REGISTER, SAVED HERE

         A7        A7-A4
         B07       A7
         A0        A7               * END CHECKED WITH A7, VECTOR LENGTH COUNTER
         A4        64
         A6        2                * J OFFSET
         A7        3                * K OFFSET

         JAN       MULRQLOP
*
         J         B00

************************************
* END OF REAL WITH QUATERNION
* MULTIPLICATION
************************************
* 17/3/2014, 
************************************


*******************************************
** QUATERNIONS                           **
*******************************************

******************************************
*
* MULTIPLY TWO QUATERNION NUMBERS
*
* NAME: MULQQ
*
* DESCRIPTION:
*        MULTIPLY TWO COMPLEX NUMBERS
*
* ENTRY: A1 = LEFT ARGUMENT ADDRESS
*        A2 = RIGHT ARGUMENT ADDRESS
*        A3 = RESULT SPACE ADDRESS
*        A4 = VECTOR LENGTH
*
* EXIT: RESULT IN MEMORY AT A3
*
* USES: S0, S1, S2
*       A0, A1, A2, A3, A4, A5, A6, A7
*       V0, V1, V2, V3, V4, V5, V6, V7
*       B07
*
* RESTRICTION:
*
******************************************
*
* A5 = 4 FOR QUATERNION NUMBERS
*
MULQQ     =         *
* SET A5 TO 2 FOR VECTOR STRIDE ON COMPLEX NUMBERS
         A5        4
* PROCESS VECTORS LONGER THAN 64 ELEMENTS
         B07       A4               * PRESERVE LENGTH, SAVE FOR LATER, WE NEED A7 AS K OFFSET
         S2        <6
         S1        A4
         S1        S1&S2
         A4        S1
* PREPARE FOR ADDRESS ADDITION TO A0
         A6        2                * CONSTANT 2, J OFFSET
         A7        3                * CONSTANT 3, K OFFSET
         S0        S1
         JSN       MULQQLOP
         A4        64
*
* PROCESS:
*    RR = AR*BR - AI*BI - AJ*BJ - AK*BK
*    RI = AR*BI + AI*BR + AJ*BK - AK*BJ
*    RJ = AR*BJ + AJ*BR + AK*BI - AJ*BI
*    RK = AR*BK + AK*BR + AI*BJ - AJ*BI
*
* LOAD AND MULTIPLY
MULQQLOP VL        A4
* RR
         A0        A1
         V0        ,A0,A5           *AR.0
         A0        A2
         V4        ,A0,A5           *BR.4
         V7        V0*FV4           * XR.7 = AR.0*BR.4
         A0        A1+1
         V1        ,A0,A5           *AI.1
         A0        A2+1
         V5        ,A0,A5           *BI.5
         V3        V1*FV5           * XR.3 = AI.1*BI.5
         V0        V7-FV3           * XR.0 = XR.7(AR*BR) - XR.3(AI*BI)
         A0        A1+A6
         V2        ,A0,A5           *AJ.2
         A0        A2+A6
         V6        ,A0,A5           *BJ.6
         V1        V2*FV6           * XR.1 = AJ.2*BJ.6
         A0        A1+A7
         V7        V0-FV1           * XR.7 = XR.0(AR*BR - AI*BI) - XR.1(AJ*BJ)
         V3        ,A0,A5           *AK.3
         A0        A2+A7
         V0        ,A0,A5           *BK.0
         V1        V3*FV0           * XR.1 = AK.3*BK.0
         V7        V7-FV1           *  RR.7 = AR*BR - AI*BI - AJ*BJ
* RI
         V0        V2*FV0           * XI.0 = AJ.2*BK.0
         A0        A1+1
         V1        ,A0,A5           *AI.1
         V2        V3*FV6           * XI.2 = AK.3*BJ.6
         V0        V0-FV2           * XI.0 = XI.0(AJ*BK) - XI.2(AK*BJ)
         A0        A3
         ,A0,A5    V7               *   SAVE RESULT "R" (RR.7)
         A0        A1
         V2        ,A0,A5           *AR.2        
         V7        V1*FV4           * XI.7 = AI.1*BR.4
         V0        V7+FV0           * XI.0 = XI.7(AI*BR) + XI.0(AJ*BK - AK*BJ)
         V1        V2*FV5           * XI.1 = AR.2*BI.5
         V3        V1+FV0           *  RI.2 = XI.1(AR*BI) + XI.0(AI*BR + AJ*BK - AK*BJ)
* RJ
         A0        A2+A7
         V7        ,A0,A5           *BK.7
         V0        V2*FV6           * XJ.0 = AR.2*BJ.6
         A0        A3+1
         ,A0,A5    V3               *   SAVE RESULT "I" (RI.2)
         A0        A1+1
         V1        ,A0,A5           *AI.1
         V3        V1*FV7           * XJ.3 = AI.1*BK.7
         V0        V0-FV3           * XJ.0 = XJ.0(AR*BJ) - XJ.3(AI*BK)
*  RK
         V7        V2*FV7           * XK.1 = AR.2*BK.7
         A0        A1+A6
         V1        ,A0,A5           *AJ.1
         V3        V1*FV5           * XK.3 = AJ.1*BI.5
         V6        V7-FV3           * XK.6 = XK.7(AR*BK) - XK.3(AJ*BI)
* RJ
         V1        V1*FV4           * XJ.1 = AJ.1*BR.4
         A0        A1+A7
         V3        ,A0,A5           *AK.3
         V2        V1+FV0           * XJ.2 = XJ.1(AJ*BR) + XJ.0(AR*BJ  - AI*BK)
         V7        V3*FV5           * XJ.7 = AK.3*BI.5
         V1        V7+FV2           *  RJ.1 = XJ.7(AK*BI) + XJ.2(AR*BJ + AJ*BR - AI*BK)
* RK
         V5        V3*FV4           * XK.5 = AK.3*BR.4
         V5        V6+FV5           * XK.5 = XK.6(AR*BK - AJ*BI) + XK.5(AK*BR)
         A0        A2+A6
         V6        ,A0,A5           *BJ.6
         A0        A1+1
         V3        ,A0,A5           *AI.3
         A0        A3+A6
         ,A0,A5    V1               *   SAVE RESULT "J" (RJ.1)
         V2        V3*FV6           * XJ.2 = AI.3*BJ.6
         V0        V5+FV2           *  RK.0 = XK.5(AR*BK + AK*BR - AJ*BI) + XJ.2(AI*BJ)
         A0        A3+A7
         ,A0,A5    V0               *   SAVE RESULT "K" (RK.0)

* CHECK FOR MORE ELEMENTS
         A6        A4*A5            * STRIDE A5 = QUATERNION
         A1        A1+A6
         A2        A2+A6
         A3        A3+A6
         A7        B07              * WE NEED ONE MORE A REGISTER, SAVED HERE

         A7        A7-A4
         B07       A7
         A0        A7               * END CHECKED WITH A7, VECTOR LENGTH COUNTER
         A4        64
         A6        2                * J OFFSET
         A7        3                * K OFFSET

         JAN       MULQQLOP
*
         J         B00

************************************
* END OF QUATERNION MULTIPLICATION
************************************
* 17/3/2014, 4:58
************************************


*******************************************
*******************************************
*******************************************
EOPROG   =        *
         S1       RT
         S2       S1-S2
         ENDP


LEFT     DATA      *,256
ENDLEFT  =         *
         DATA      *,1                 * THE DATA SHALL NOT BE ALIGNED BETWEEN
*                                      * BLOCKS TO PREVENT SAME LINE CONFLICT
RIGHT    DATA      *,2048
         DATA      *,1
RESULT   DATA      *,2048

******************************************************************
*
******************************************************************

DATASPAC =         *
* Virtue OUTPUT GOES HERE: (SEE PROGRAMME BELOW)
*
*
ENDDATA  =         *

         EXEC      *,*

         END
